package main

import (
	"fmt"
	"go/types"
	"log"
	"sort"

	"github.com/alextanhongpin/mapper"
	"github.com/alextanhongpin/mapper/cmd/mapper/internal"
	"github.com/dave/jennifer/jen"
	. "github.com/dave/jennifer/jen"
)

const GeneratorName = "github.com/alextanhongpin/mapper"

type C []Code

func (c *C) Add(code ...Code) *C {
	*c = append(*c, code...)
	return c
}

func main() {
	if err := mapper.New(func(opt mapper.Option) error {
		gen := NewGenerator(opt)
		return gen.Generate()
	}); err != nil {
		log.Fatalln(err)
	}
}

type Generator struct {
	opt              mapper.Option
	uses             map[string]mapper.Type
	mappers          map[string]bool
	hasErrorByMapper map[string]bool
}

func NewGenerator(opt mapper.Option) *Generator {
	return &Generator{
		opt:              opt,
		uses:             make(map[string]mapper.Type),
		mappers:          make(map[string]bool),
		hasErrorByMapper: make(map[string]bool),
	}
}

type FieldResolver interface {
	Name() string
	Var() *Statement
	Selection() *Statement
	Lhs() interface{}
	Rhs() mapper.StructField
	IsField() bool
	IsMethod() bool
}

type fieldResolver struct {
	method *mapper.Func
	field  *mapper.StructField
	name   string
	rhs    mapper.StructField
}

func NewMethodFieldResolver(method *mapper.Func, name string, rhs mapper.StructField) *fieldResolver {
	return &fieldResolver{
		method: method,
		name:   argsWithIndex(name, 0),
		rhs:    rhs,
	}
}

func NewStructFieldResolver(field *mapper.StructField, name string, rhs mapper.StructField) *fieldResolver {
	return &fieldResolver{
		field: field,
		name:  argsWithIndex(name, 0),
		rhs:   rhs,
	}
}

func (f fieldResolver) SetName(name string) {
	f.name = argsWithIndex(name, 0)
}

func (f fieldResolver) Name() string {
	return f.name
}

func (f fieldResolver) Var() *Statement {
	if f.method != nil {
		return Id(f.name + f.method.Name).Clone()
	}
	if f.field != nil {
		return Id(f.name + f.field.Name).Clone()
	}
	return nil
}

func (f fieldResolver) Selection() *Statement {
	if f.method != nil {
		return Id(f.name).Dot(f.method.Name).Call().Clone()
	}
	if f.field != nil {
		return Id(f.name).Dot(f.field.Name).Clone()
	}
	return nil
}

func (f fieldResolver) Rhs() mapper.StructField {
	return f.rhs
}

func (f fieldResolver) Lhs() interface{} {
	if f.IsField() {
		return f.field
	}

	if f.IsMethod() {
		return f.method
	}

	panic("mapper: resolver must be field or method")
}

func (f fieldResolver) IsField() bool {
	return f.field != nil && f.method == nil
}

func (f fieldResolver) IsMethod() bool {
	return f.method != nil && f.field == nil
}

func (g *Generator) Generate() error {
	var (
		pkgPath = g.opt.PkgPath
		pkgName = g.opt.PkgName
		typ     = g.opt.Type
		out     = g.opt.Out
	)

	// Since a package path basename might not be the same as the package name,
	// This allows us to use Qual and exclude imports from the same package.
	f := NewFilePathName(pkgPath, pkgName)
	f.PackageComment(fmt.Sprintf("Code generated by %s, DO NOT EDIT.", GeneratorName))

	// Cache first so that we can re-use later.
	var keys []string
	for key, method := range typ.InterfaceMethods {
		g.mappers[method.NormalizedSignature()] = false
		keys = append(keys, key)
	}
	sort.Strings(keys)

	var stmts []*Statement
	for _, key := range keys {
		method := typ.InterfaceMethods[key]
		g.validateToAndFromStruct(method)
		if g.mappers[method.NormalizedSignature()] {
			continue
		}
		stmt := g.genPrivateMethod(Null(), method)
		stmts = append(stmts, stmt)
		g.mappers[method.NormalizedSignature()] = true
	}

	// Generate the struct and constructor before the method declarations.
	g.genStruct(f)
	g.genConstructor(f)

	for _, stmt := range stmts {
		f.Add(stmt)
	}

	for _, key := range keys {
		method := typ.InterfaceMethods[key]
		if !g.mappers[method.NormalizedSignature()] {
			panic("mapper: method not found")
		}
		g.genPublicMethod(f, method)
	}

	return f.Save(out) // e.g. main_gen.go
}

func (g *Generator) usesKeys() []string {
	var keys []string
	for key := range g.uses {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	return keys
}

func (g *Generator) genStruct(f *jen.File) {
	// Output:
	// type Converter struct {
	//   customInterface interfacepkg.CustomInterface
	//   customStruct    *structpkg.CustomStruct
	// }

	f.Type().Id(g.opt.TypeName).StructFunc(func(group *Group) {
		typeNames := g.usesKeys()
		for _, typeName := range typeNames {
			use := g.uses[typeName]
			group.Add(Id(typeName), Do(func(s *Statement) {
				if use.IsStruct {
					s.Add(Op("*"))
				}
			}).Qual(use.PkgPath, use.Type))
		}
	}).Line()
}

func (g *Generator) genConstructor(f *jen.File) {
	// Output:
	// func NewConverter(customStruct *structpkg.CustomStruct, customInterface interfacepkg.CustomInterface) *Converter {
	//   return &Converter{
	//     structpkgCustomStruct: customStruct,
	//     interfacepkgCustomInterface: customInterface,
	//   }
	// }

	typeName := g.opt.TypeName
	typeNames := g.usesKeys()

	f.Func().Id(fmt.Sprintf("New%s", typeName)).ParamsFunc(func(group *Group) {
		for _, structName := range typeNames {
			use := g.uses[structName]
			group.Add(Id(structName), Do(func(s *Statement) {
				if use.IsStruct {
					s.Add(Op("*"))
				}
			}).Qual(use.PkgPath, use.Type))
		}
	}).Op("*").Id(typeName).Block(
		Return(Op("&").Id(typeName).ValuesFunc(func(group *Group) {
			dict := make(Dict)
			for _, structName := range typeNames {
				dict[Id(structName)] = Id(structName)
			}
			group.Add(dict)
		})),
	).Line()
}

type mapperFunc struct {
	Fn         *mapper.Func
	In         mapper.StructField
	structName string
	callerID   *Statement // customfuncpkg.CustomFunc | c.customstructpkg.structname.StructMethod | c.custominterfacepkg.interfacename.InterfaceMethod
	resolver   FieldResolver
}

func (m mapperFunc) CallerID() *Statement {
	return m.callerID.Clone()
}

// genPrivateMethod generates the most basic, struct A to struct B conversion
// without pointers, slice etc.
func (g *Generator) genPrivateMethod(f *jen.Statement, fn mapper.Func) *jen.Statement {
	var (
		typeName = g.opt.TypeName
		fnName   = fn.NormalizedName()
		from     = fn.From
		to       = fn.To
	)

	var mappersWithError []mapperFunc
	var pointers, methodsWithError C

	genReturnOnError := func() *Statement {
		// Output:
		// if err != nil {
		//   return Bar{}, err
		// }
		if fn.Error == nil {
			panic(ErrMissingReturnError(fn))
		}

		return If(Id("err").Op("!=").Id("nil").Block(
			Return(
				List(
					genType(to.Type).Values(Dict{}),
					Id("err"),
				),
			)),
		).Clone()
	}

	// Loop through all the target keys.
	var keys []string
	for key := range to.Type.StructFields {
		keys = append(keys, key)
	}
	sort.Strings(keys)

	var resolversV1 []internal.Resolver
	var resolvers []FieldResolver
	for _, key := range keys {
		// The RHS struct field.
		to := to.Type.StructFields[key]

		// If LHS field matches the RHS field ...
		if field, ok := from.Type.StructFields[key]; ok {
			if field.Tag != nil && !field.Tag.IsField() {
				// Has a LHS struct field, but calls the method instead.
				//
				// Input:
				// type Lhs struct{
				//   // Custom `map` tag to indicate what method name to call.
				//   name string `map:"Name(),CustomFunc"`
				// }
				//
				// func (l Lhs) Name() string {}
				//
				structMethods := mapper.ExtractNamedMethods(from.Type.T)
				method, ok := structMethods[key]
				if !ok {
					panic(fmt.Sprintf("mapper: method not found: %s", field.Tag.Name))
				}

				resolversV1 = append(resolversV1, internal.NewMethodResolver(from.Name, &field, method, to))
				continue
			}
			// Just an ordinary LHS struct field. Noice.
			resolver := NewStructFieldResolver(&field, from.Name, to)
			resolvers = append(resolvers, resolver)

			resolversV1 = append(resolversV1, internal.NewFieldResolver(from.Name, field, to))
			continue
		}

		// Has a LHS struct field, but calls the method instead.
		// The difference is there's no custom `map` tag to tell us what method it
		// is. Rather, we infer from the name of the RHS field.
		//
		// Input:
		// type Lhs struct{
		//   name string
		// }
		//
		// func (l Lhs) Name() string {}
		//
		// LHS method can also return error as the second argument.
		structMethods := mapper.ExtractNamedMethods(from.Type.T)
		if method, ok := structMethods[key]; ok {
			resolver := NewMethodFieldResolver(&method, from.Name, to)
			resolvers = append(resolvers, resolver)

			resolversV1 = append(resolversV1, internal.NewMethodResolver(from.Name, nil, method, to))
			continue
		}

		panic(fmt.Sprintf("mapper: cannot map field %q for %s", key, to.Type.Signature()))
	}

	var c C
	dict := make(Dict)
	for _, r := range resolversV1 {
		var (
			rhs          = r.Rhs()
			tag          = r.Tag()
			isLHSPointer bool
			isRHSPointer = rhs.Type.IsPointer
			hasTag       = tag != nil
			a0Name       = r.LhsVar
			a0Selection  = r.RhsVar
			a0Type       = r.LhsType

			bName = func() Code { return Id(rhs.Name).Clone() }
			bType = r.RhsType

			requiresOutputPointer = func() bool { return !isLHSPointer && isRHSPointer }
		)

		if r.IsMethod() {
			method := r.Lhs().(mapper.Func)
			hasError := method.Error != nil
			isLHSPointer = method.To.Type.IsPointer

			// No tags, no errors, and equal types means we can assign the field directly.
			if !hasTag && !hasError && method.To.Type.Equal(rhs.Type) {
				// Output:
				// Name: a0.Name()
				dict[bName()] = a0Selection()
				continue
			}

			if hasError {
				// Output
				// a0Name, err := a0.Name()
				// if err != nil { ...  }
				c.Add(List(a0Name(), Id("err")).Op(":=").Add(a0Selection()))
				c.Add(genReturnOnError())
			} else {
				// Output:
				// a0Name := a0.Name()
				c.Add(a0Name().Op(":=").Add(a0Selection()))
			}
			// Don't exit yet, there might be another step of transformation.
		} else {
			// LHS is also a struct field.
			lhs := r.Lhs().(mapper.StructField)
			isLHSPointer = lhs.Type.IsPointer

			// No tags and equal types means we can assign the field directly.
			if !hasTag && lhs.Type.Equal(rhs.Type) {
				// Output:
				// Name: a0.Name
				dict[bName()] = a0Selection()
				continue
			}
			// There are probably further conversion for this field.
		} // END OF if r.IsMethod()

		// TAG.
		// A tag exists, and could have transformation functions.
		if tag != nil && tag.HasFunc() {
			// If a method is provided, it works for single or slice, but the output
			// raw type must match.

			// The tag defines a custom function, TransformationFunc that can be used to
			// map LHS field to RHS.
			if tag.IsFunc() {
				var (
					lhs                  = r.Lhs().(mapper.StructField)
					left                 = lhs.Type
					right                = rhs.Type
					fn                   = g.loadTagFunction(&lhs)
					from                 = fn.From.Type
					to                   = fn.To.Type
					hasError             = fn.Error != nil
					requiresInputPointer = !isLHSPointer && from.IsPointer
					requiresInputValue   = isLHSPointer && !from.IsPointer
				)
				g.validateFunctionSignatureMatch(fn, left, right)

				genFuncCall := func() *jen.Statement {
					// Output:
					// fn.Fn(a0Name)
					return Qual(fn.PkgPath, fn.Name).Call(Do(func(s *Statement) {
						if requiresInputPointer {
							// Output:
							// fn.Fn(&a0Name)
							s.Add(Op("&"))
						} else if requiresInputValue {
							// Output:
							// fn.Fn(*a0Name)
							s.Add(Op("*"))
						}
					}).Add(a0Selection())).Clone()
				}

				if hasError {
					// IS SLICE.
					if requiresInputValue {
						// Output:
						// var a1Name *fn.T
						// if a0Name != nil {
						//   a1Name, err = fn.Fn(a0Name)
						//   if err != nil {
						//      return nil, err
						//   }
						// }
						r.Assign()
						c.Add(Var().Add(a0Name()).Add(internal.GenType(to)))
						c.Add(If(a0Selection().Op("!=").Id("nil")).Block(
							List(a0Name(), Id("err")).Op("=").Add(genFuncCall()),
							If(Id("err").Op("!=").Id("nil")).Block(genReturnOnError()),
						))
					} else {
						// Output:
						// a2Name, err := fn.Fn(a1Name)
						// if err != nil {
						//  return nil, err
						// }
						r.Assign()
						c.Add(
							List(a0Name(), Id("err")).Op("=").Add(genFuncCall()),
							If(Id("err").Op("!=").Id("nil")).Block(genReturnOnError()),
						)
					}
					dict[bName()] = r.RhsVar()
					continue
				} // END OF hasError for tag.IsFunc()

				// NO ERROR:
				if requiresInputValue {
					// Output:
					// var a1Name *fn.T
					// if a0Name != nil {
					// 	 a1Name = fn.Fn(a0Name)
					// }
					r.Assign()
					c.Add(Var().Add(a0Name()).Add(internal.GenType(to)))
					c.Add(If(a0Selection().Op("!=").Id("nil")).Block(
						a0Name().Op("=").Add(genFuncCall())),
					)
				} else {
					// Output:
					// a2Name := fn.Fn(a1Name)
					r.Assign()
					c.Add(a0Name().Op(":=").Add(genFuncCall()))
				}
			} // END OF: tag.IsFunc()

			// Func
			// struct.Method
			// interface.Method
			continue
		} // END OF: TAG CUSTOM FUNCTION MAPPING.

		// The types might still not match.

		if requiresOutputPointer() {
			// Since this could be a method call, we still need to assign to another
			// variable before converting to pointer.
			// Output:
			// a1Name := &a0Name
			r.Assign()
			c.Add(a0Name().Op(":=").Op("&").Add(a0Selection()))

			// Output:
			// bName: a1Name
			r.Assign()
			dict[bName()] = a0Selection()
			continue
		}
		// bName: a0Name
		dict[bName()] = a0Selection()
	}
	fmt.Printf("%#v\n", dict)
	fmt.Printf("%#v\n", c)
	fmt.Println(dict)

	dict = make(Dict)
	for _, resolver := range resolvers {
		var (
			rhs = resolver.Rhs().Type
			// Argument name has a `0` to indicate it's position, which is useful to
			// avoid conflict in naming.
			a0Name      = resolver.Var
			a0Selection = resolver.Selection

			// The return type field name.
			bName = resolver.Rhs().Name
		)

		// Resolves method. Note that tag function transformation does not apply to
		// methods.
		if resolver.IsMethod() {
			method := resolver.Lhs().(*mapper.Func)
			if method.Error != nil {
				// Output:
				// a0Name, err := a0.Name()
				// if err != nil {
				//   return B{}, err
				// }
				methodsWithError.Add(
					List(a0Name(), Id("err")).Op(":=").Add(a0Selection()),
					genReturnOnError().Line(),
				)

				// Output:
				// name: a0Name
				dict[Id(bName)] = a0Name()
			} else {
				// Output:
				// name: a0.Name()
				dict[Id(bName)] = a0Selection()
			}
			continue
		}

		var (
			left = resolver.Lhs().(*mapper.StructField)
			lhs  = left.Type
		)

		// Check if there is a tag transformation.
		if tag := left.Tag; tag != nil && tag.HasFunc() {
			// The tag defines a custom function, TransformationFunc that can be used to
			// map LHS field to RHS.
			if tag.IsFunc() {
				fn := g.loadTagFunction(left)
				g.validateFunctionSignatureMatch(fn, lhs, rhs)

				// If the TransformationFunc returns error, it needs to be handled and
				// returned early.
				if fn.Error != nil {
					mappersWithError = append(mappersWithError, mapperFunc{
						Fn:       fn,
						In:       *left,
						resolver: resolver,
						// funcpkg.CustomFunc
						callerID: Qual(fn.PkgPath, fn.Name),
					})
					// Name: aName,
					dict[Id(bName)] = a0Name()
					continue
				}

				// No errors.
				// RHS field is a pointer.
				// LHS needs to be converted to a pointer too.
				g.validatePointerConversion(lhs, rhs)
				if rhs.IsPointer {
					// customfuncpkg.CustomFunc(a0.Name)
					callerID := Qual(fn.PkgPath, fn.Name)
					if lhs.IsPointer {
						// Output:
						// var a0Name *outpkg.OutType
						// if a0.Name != nil {
						//   res := customfuncpkg.CustomFunc(*a0.Name)
						//   a0Name = &res
						// }
						pointers.Add(
							Var().Add(a0Name()).Op("*").Add(genType(rhs)),
							If(a0Selection()).Block(
								Id("tmp").Op(":=").Add(callerID.Call(Op("*").Add(a0Selection()))),
								a0Name().Op("=").Op("&").Id("tmp"),
							),
						)

						// Output:
						// Name: a0Name
						dict[Id(bName)] = a0Name()
					} else {
						// Output:
						// a0Name := customfuncpkg.CustomFunc(a0.Name)
						pointers.Add(a0Name().Op(":=").Add(callerID.Call(a0Selection())))

						// Output:
						// Name: &a0Name
						dict[Id(bName)] = Do(func(s *Statement) {
							// If the output of the function is not a pointer.
							if !fn.To.Type.IsPointer {
								s.Add(Op("&"))
							}
						}).Add(a0Name())
					}
					continue
				}

				// name: customfuncpkg.CustomFunc(a.Name)
				dict[Id(bName)] = Qual(fn.PkgPath, fn.Name).Call(a0Selection())
				continue
			}

			// The tag loads a custom struct or interface method.
			if tag.IsMethod() {
				fieldPkgPath := left.PkgPath
				if tag.IsImported() {
					fieldPkgPath = tag.PkgPath
				}

				// Load the function.
				pkg := mapper.LoadPackage(fieldPkgPath)
				obj := mapper.LookupType(pkg, tag.TypeName)
				if obj == nil {
					panic(fmt.Sprintf("mapper: type not found: %s", tag.TypeName))
				}

				if _, ok := obj.Type().(*types.Named); !ok {
					panic("mapper: not a named type")
				}

				typ := mapper.NewType(obj.Type())
				var method mapper.Func
				switch {
				case typ.IsInterface:
					method = typ.InterfaceMethods[tag.Func]
				case typ.IsStruct:
					structMethods := mapper.ExtractNamedMethods(typ.T)
					method = structMethods[tag.Func]
				default:
					panic(fmt.Sprintf("mapper: tag %q is invalid", tag.Tag))
				}

				g.validateFunctionSignatureMatch(&method, lhs, rhs)

				// To avoid different packages having same struct name, prefix the
				// struct name with the package name.
				structPackageName := tag.Pkg + tag.TypeName
				if tag.Pkg == "" {
					structPackageName = mapper.LowerFirst(structPackageName)
				}
				g.uses[structPackageName] = *typ

				if method.Error != nil {
					mappersWithError = append(mappersWithError, mapperFunc{
						Fn:         &method,
						In:         *left,
						structName: structPackageName,
						resolver:   resolver,
						// c.structpkgCustomStruct.CustomMethod(a0.Name)
						callerID: g.genShortName().Dot(structPackageName).Dot(method.Name).Call(a0Selection()),
					})
					// Name: aName,
					dict[Id(bName)] = a0Name()
					continue
				}

				g.validatePointerConversion(lhs, rhs)
				if rhs.IsPointer {
					// c.interfacePkgInterface.CustomMethod
					callerID := Add(g.genShortName()).Dot(structPackageName).Dot(method.Name)
					if lhs.IsPointer {
						// Output:
						// var a0Name *outpkg.OutType
						// if a0.Name != nil {
						//   res := c.interfacePkgInterface.CustomMethod(*a.Name)
						//   a0Name = &res
						// }
						pointers.Add(
							Var().Add(a0Name()).Op("*").Add(genType(rhs)),
							If(a0Selection()).Block(
								Id("res").Op(":=").Add(callerID.Call(Op("*").Add(a0Selection()))),
								a0Name().Op("=").Op("&").Id("res"),
							),
						)
						// a0Name: a0Name
						dict[Id(bName)] = a0Name()
					} else {
						// a0Name := c.interfacePkgInterface.CustomMethod(a.Name)
						// Name: &a0Name
						pointers.Add(a0Name().Op(":=").Add(callerID.Call(a0Selection())))
						dict[Id(bName)] = Do(func(s *Statement) {
							// Only add pointer return type if the method is not returning
							// pointer already.
							if !method.To.Type.IsPointer {
								s.Add(Op("&"))
							}

						}).Add(a0Name())
					}
					continue

				}
				// Name: c.interfacePkgInterface.CustomMethod(a.Name)
				dict[Id(bName)] = g.genShortName().Dot(structPackageName).Dot(method.Name).Call(a0Selection())
				continue
			}
		} // End of custom tag function.

		// LHS field does not match RHS field for some reason.
		// This could be a struct to struct conversion that requires another
		// internally implemented mapper.
		if !lhs.Equal(rhs) {
			// But the same type exists, could be a value to pointer conversion.
			// PkgPath matters.
			if (lhs.Type == rhs.Type) && (lhs.PkgPath == rhs.PkgPath) && (!lhs.IsPointer && rhs.IsPointer) {
				dict[Id(bName)] = Op("&").Add(a0Selection())
				continue
			}
			// Check if there is a private mapper with the signature that accepts LHS
			// and returns RHS .
			methodSignature := buildFnSignature(lhs, rhs)
			_, hasSignature := g.mappers[methodSignature]
			if !hasSignature {
				panic(ErrConversion(lhs, rhs))
			}

			var method *mapper.Func
			for _, met := range g.opt.Type.InterfaceMethods {
				if met.NormalizedSignature() == methodSignature {
					method = &met
					break
				}
			}
			if method == nil {
				panic(fmt.Sprintf("mapper: no signature found %s", methodSignature))
			}

			// If the mapper method returns an error, or if it is actually a slice
			// to slice conversion ...
			if method.Error != nil || rhs.IsSlice {
				mappersWithError = append(mappersWithError, mapperFunc{
					Fn:       method,
					In:       *left,
					resolver: resolver,
					// c.mapAToB
					callerID: g.genShortName().Dot(method.NormalizedName()),
				})
				// Output:
				// Name: a0Name,
				dict[Id(bName)] = a0Name()
				continue
			}

			g.validatePointerConversion(lhs, rhs)

			// RHS is pointer. LHS needs to be converted to a pointer too.
			if rhs.IsPointer {
				// c.mapAtoB(a.Name)
				callerID := g.genShortName().Dot(method.NormalizedName())

				// LHS is a pointer, ensure there is no nil pointer conversion.
				if lhs.IsPointer {
					// Output:
					// var a0Name *outpkg.OutType
					// if a0.Name != nil {
					//   res := c.mapAtoB(*a.Name)
					//   a0Name = &res
					// }
					pointers.Add(
						Var().Add(a0Name()).Op("*").Add(genType(rhs)),
						If(a0Selection().Op("!=").Id("nil")).Block(
							Id("res").Op(":=").Add(callerID.Call(Op("*").Add(a0Selection()))),
							a0Name().Op("=").Op("&").Id("res"),
						),
					)
					// Output:
					// a0Name: a0Name
					dict[Id(bName)] = a0Name()
					continue
				}
				// Output:
				// a0Name := c.mapAtoB(a.Name)
				pointers.Add(
					a0Name().Op(":=").Add(callerID.Call(a0Selection())),
				)

				// Output:
				// Name: &a0Name
				dict[Id(bName)] = Op("&").Add(a0Name())
				continue
			}

			// Name: c.mapAtoB(a.Name)
			dict[Id(bName)] = g.genShortName().Dot(method.NormalizedName()).Call(a0Selection())
			continue
		}

		// Output:
		// Name: a.Name
		dict[Id(bName)] = a0Selection()
		continue
	}

	genPrivateMapperMethodsWithError := func(g *Group) {
		for _, fn := range mappersWithError {

			var (
				lhs         = fn.In.Type
				rhs         = fn.Fn.To.Type
				method      = fn.Fn
				a0Name      = fn.resolver.Var
				a0Selection = fn.resolver.Selection
			)
			// []*B
			returnType := Do(func(s *Statement) {
				if lhs.IsSlice {
					s.Add(Index())
				}
				if lhs.IsPointer {
					s.Add(Op("*"))
				}
			}).Add(genType(rhs))

			if lhs.IsSlice {
				// aName := make([]B, len(a.Name))
				g.Add(a0Name().Op(":=").Make(returnType, Len(a0Selection())))

				// The mapper method has error, handle it.
				if method.Error != nil {
					// Output:
					// aName := make([]B, len(a.Name))
					// for i, each := range a.Name {
					//   var err error
					//   aName[i], err = callerFunc(a.Name)
					//   if err != nil {
					//     return Bar{}, err
					//   }
					// }
					g.Add(For(List(Id("i"), Id("each")).Op(":=").Range().Add(a0Selection())).Block(
						Var().Id("err").Id("error"),
						List(a0Name().Index(Id("i")), Id("err")).Op("=").Add(fn.CallerID()).Call(Id("each")),
						genReturnOnError(),
					).Line())
					continue
				}
				// Output:
				// aName := make([]B, len(a.Name))
				// for i, each := range a.Name {
				//   aName[i] := callerFn(a.Name)
				// }
				g.Add(For(List(Id("i"), Id("each")).Op(":=").Range().Add(a0Selection())).Block(
					a0Name().Index(Id("i")).Op("=").Add(fn.CallerID()).Call(Id("each")),
				))
				continue
			}
			// Output:
			// aName, err := callerFn(a.Name)
			// if err != nil {
			//	return Bar{}, err
			// }
			g.Add(List(a0Name(), Id("err")).Op(":=").Add(fn.CallerID()).Call(a0Selection()))
			g.Add(genReturnOnError().Line())
		}
	}

	genReturnType := func(s *Statement) {
		if fn.Error != nil {
			// (Bar, nil)
			s.Add(Parens(List(genType(to.Type), Id("error"))))
		} else {
			// (Bar)
			s.Add(genType(to.Type))
		}
	}

	// No error signature for this function, however there are mappers with
	// errors.
	if fn.Error == nil && (len(methodsWithError)+len(mappersWithError) > 0) {
		panic(ErrMissingReturnError(fn))
	}

	// We need to know if the mapper has error signature.
	g.hasErrorByMapper[fn.NormalizedSignature()] = fn.Error != nil

	f.Func().
		Params(g.genShortName().Op("*").Id(typeName)). // (c *Converter)
		Id(fnName).                                    // mapMainAToMainB
		Params(
			Id(argsWithIndex(from.Name, 0)).Add(genType(from.Type)),
		). // (a A)
		Do(genReturnType).
		BlockFunc(func(g *Group) {
			// Output:
			// var a0Name *outpkg.OutType
			// if a0.Name != nil {
			//   res := methodcall(*a0.Name)
			//   a0Name = &res
			// }
			for _, pointer := range pointers {
				g.Add(pointer)
			}

			// Output:
			// a0Name, err := a0.Name()
			// if err != nil {
			//   return B{}, err
			// }
			for _, c := range methodsWithError {
				g.Add(c)
			}

			// Output:
			// aName, err := customfuncpkg.CustomFunc(a.Name)
			// aName, err := c.struct.CustomMethod(a.Name)
			// aName, err := c.mapAtoB(a.Name)
			// if err != nil {
			//	return Bar{}, err
			// }
			genPrivateMapperMethodsWithError(g)

			g.Add(ReturnFunc(func(g *Group) {
				if fn.Error != nil {
					// Output:
					// return Bar{}, nil
					g.Add(
						List(
							genType(to.Type).Values(dict),
							Id("nil"),
						),
					)
				} else {
					// Output:
					// return Bar{}
					g.Add(
						genType(to.Type).Values(dict))
				}
			}))
		}).Line()
	return f
}

func (g *Generator) genPublicMethod(f *jen.File, fn mapper.Func) {
	var (
		typeName = g.opt.TypeName
	)
	// Output:
	// func (c *Converter) Convert(a A) (B, error) {
	//   return c.mapMainAtoMainB(a.Field)
	// }

	this := g
	from, to := fn.From, fn.To
	if (from.Variadic || from.Type.IsSlice) != to.Type.IsSlice {
		panic("mapper: slice to no-slice and vice versa is not allowed")
	}
	isSlice := from.Type.IsSlice

	// main.A
	inType := genType(from.Type)

	// main.B
	outType := genType(to.Type)

	genInputType := func(g *Group) {
		g.Add(
			Id(argsWithIndex(from.Name, 0)).Do(func(s *Statement) {
				if !from.Variadic && from.Type.IsSlice {
					s.Add(Index())
				}
				if from.Type.IsPointer {
					s.Add(Op("*"))
				}
				if from.Variadic {
					s.Add(Op("..."))
				}
			}).Add(inType),
		)
	}

	genReturnType := func(s *Statement) {
		returnType := Do(func(rs *Statement) {
			// Output:
			// []main.B
			if to.Type.IsSlice {
				rs.Add(Index())
			}

			// Output:
			// []*main.B
			if to.Type.IsPointer {
				rs.Add(Op("*"))
			}
		}).Add(outType)

		if fn.Error != nil {
			// (*Bar, error)
			s.Add(Parens(List(returnType, Id("error"))))
		} else {
			// (*Bar)
			s.Add(returnType)
		}
	}

	genReturnOnError := func() *Statement {
		if fn.Error == nil {
			panic(fmt.Sprintf("mapper: missing return error for %s", fn.PrettySignature()))
		}

		return If(Id("err").Op("!=").Id("nil")).Block(ReturnFunc(func(g *Group) {
			if isSlice || to.Type.IsPointer {
				// Output:
				// if err != nil {
				//   return nil, err
				// }
				g.Add(List(Id("nil"), Id("err")))
				return
			}

			// Output:
			// if err != nil {
			//   return B{}, err
			// }
			g.Add(List(outType.Clone().Values(), Id("err")))
		})).Clone()
	}

	f.Func().
		Params(g.genShortName().Op("*").Id(typeName)). // (c *Converter)
		Id(fn.Name).ParamsFunc(genInputType).          // Convert(a *A)
		Do(genReturnType).                             // (*B, error)
		BlockFunc(func(g *Group) {
			a0 := func() *Statement {
				return Id(argsWithIndex(from.Name, 0)).Clone()
			}
			// If one of the mappers return error, but the actual function definition
			// does not, something is wrong.
			mapperHasError := this.hasErrorByMapper[fn.NormalizedSignature()]
			if mapperHasError && fn.Error == nil {
				panic(fmt.Sprintf("mapper: missing return error for %s", fn.PrettySignature()))
			}

			if isSlice {
				// res := make([]B, len(a))
				g.Add(Id("res").Op(":=").Make(List(Index().Add(outType), Len(a0()))))
				g.Add(For(List(Id("i"), Id("each")).Op(":=").Range().Add(a0())).BlockFunc(func(g *Group) {
					// If the private method does not have error, exit.
					if mapperHasError {
						// Output:
						// for i, each := range a {
						//   var err error
						//   res[i], err = c.mapMainAToMainB(each)
						//   if err != nil { return err }
						// }

						g.Add(Var().Id("err").Id("error"))
						g.Add(List(
							Id("res").Index(Id("i")),
							Id("err"),
						).Op("=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(Id("each")))
						g.Add(genReturnOnError())
					} else {
						// Output:
						// for i, each := range a {
						//   res[i] = c.mapMainAToMainB(each)
						// }
						g.Add(Id("res").Index(Id("i")).Op("=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(Id("each")))
					}
				}))

				if fn.Error != nil {
					// return res, nil
					g.Add(Return(List(Id("res"), Id("nil"))))
					return
				}
				// return res
				g.Add(Return(Id("res")))
				return
			}

			if from.Type.IsPointer && to.Type.IsPointer {
				g.Add(If(a0()).Op("==").Id("nil").Block(
					ReturnFunc(func(g *Group) {
						if fn.Error != nil {
							// Output:
							// if a0 == nil {
							//   return nil, nil
							// }
							g.Add(List(Id("nil"), Id("nil")))
						} else {
							// Output:
							// if a0 == nil {
							//   return nil
							// }
							g.Add(Id("nil"))
						}
					}),
				))

				if mapperHasError {
					// Output:
					// res, err := c.mapMainAToMainB(*a0)
					// if err != nil {
					//   return nil, err
					// }
					g.Add(List(Id("res"), Id("err")).Op(":=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(Op("*").Add(a0())))
					g.Add(genReturnOnError())
				} else {
					// Output:
					// res := c.mapMainAToMainB(*a0)
					g.Add(Id("res")).Op(":=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(Op("*").Add(a0()))
				}

				if fn.Error != nil {
					// return &res, nil
					g.Add(Return(List(Op("&").Id("res")), Id("nil")))
					return
				}

				// Output:
				// return &res
				g.Add(Return(Op("&").Id("res")))
				return
			}

			if to.Type.IsPointer {
				if mapperHasError {
					// Output:
					// res, err := c.mapMainAToMainB(a)
					// if err != nil {
					//   return nil, err
					// }
					g.Add(List(Id("res"), Id("err")).Op(":=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(a0()))
					g.Add(genReturnOnError())
				} else {
					// Output:
					// res := c.mapMainAToMainB(a)
					g.Add(Id("res")).Op(":=").Add(this.genShortName()).Dot(fn.NormalizedName()).Call(a0())
				}

				if fn.Error != nil {
					// return &res, nil
					g.Add(Return(List(Op("&").Id("res")), Id("nil")))
					return
				}
				// Output:
				// return &res
				g.Add(Return(Op("&").Id("res")))
				return
			}

			// Output:
			// return c.mapMainAtoMainB(a0)
			g.Add(Return(this.genShortName().Dot(fn.NormalizedName()).Call(a0())))
		}).Line()
}

func (g *Generator) genShortName() *Statement {
	return Id(mapper.ShortName(g.opt.TypeName)).Clone()
}

func pointerOp(m *mapper.Type, op string) string {
	if !m.IsPointer {
		return ""
	}
	return op
}

func argsWithIndex(name string, index int) string {
	return fmt.Sprintf("%s%d", name, index)
}

func (g *Generator) validateToAndFromStruct(fn mapper.Func) {
	from, to := fn.From, fn.To
	g.validateFieldMapping(from.Type, to.Type)

	fromFields := from.Type.StructFields
	fromMethods := mapper.ExtractNamedMethods(from.Type.T)

	// Check that the result struct has all the fields provided by the input
	// struct.
	for name, rhs := range to.Type.StructFields {
		if lhs, exists := fromFields[name]; exists {
			g.validateStructField(lhs, rhs)
			continue
		}
		if lhs, exists := fromMethods[name]; exists {
			g.validateMethodSignature(lhs, rhs)
			continue
		}
		panic(fmt.Sprintf("mapper: field not found: %s.%s does not have fields that maps to %s.%s(%s)",
			from.Type.Pkg,
			from.Name,
			to.Type.Pkg,
			name,
			to.Type.Type,
		))
	}
}

func (g *Generator) validateFieldMapping(lhs, rhs *mapper.Type) {
	if lhs.IsSlice != rhs.IsSlice {
		if lhs.IsSlice {
			// TODO: Add better message.
			panic("mapper: cannot convert from slice to struct")
		} else {
			panic("mapper: cannot convert from struct to slice")
		}
	}
	if lhs.IsPointer && !rhs.IsPointer {
		panic("mapper: value to pointer conversion not allowed")
	}
}

func (g *Generator) validateStructField(lhs, rhs mapper.StructField) {
	if !lhs.Type.Equal(rhs.Type) {
		// If one of the mappers already implement this, skip the error.
		if _, exists := g.mappers[buildFnSignature(lhs.Type, rhs.Type)]; exists {
			return
		}
		// There could also be a tag function.
		if lhs.Tag != nil {
			return
		}
		// There could also be a value to pointer conversion.
		// Only applies for the same type, e.g. string to *string.
		// For structs, they may belong to different package.
		if (lhs.Type.Type == rhs.Type.Type) && (lhs.Type.PkgPath == rhs.Type.PkgPath) && (!lhs.IsPointer && rhs.IsPointer) {
			return
		}

		panic(ErrConversion(lhs.Type, rhs.Type))
	}
}

// validateMethodSignature checks if the lhs.method() returns the right
// signature required by rhs.
func (g *Generator) validateMethodSignature(lhs mapper.Func, rhs mapper.StructField) {
	if lhs.From != nil {
		panic(fmt.Sprintf("mapper: struct method should not have arguments %s.%s(%s %s)", lhs.Pkg, lhs.Name, lhs.From.Name, lhs.From.Type.Type))
	}

	// TODO: check if there is a local mapper that fulfils this type conversion.
	// This can only be from one of the converters.
	if !lhs.To.Type.Equal(rhs.Type) {
		panic(ErrConversion(lhs.To.Type, rhs.Type))
	}
}

func (g *Generator) validateFunctionSignatureMatch(fn *mapper.Func, lhs, rhs *mapper.Type) {
	var (
		in                  = fn.From.Type
		out                 = fn.To.Type
		pointerToNonPointer = lhs.IsPointer && !rhs.IsPointer
	)
	// Slice A might not equal A
	// []A != A
	if !in.Equal(lhs) {
		// But internally, the type matches. This is allowed because we may have a
		// private mapper that maps A.
		// A == A
		if in.Type != lhs.Type {
			panic(ErrMismatchType(in, lhs))
		}
	}

	if !out.Equal(rhs) {
		if out.Type != rhs.Type {
			panic(ErrMismatchType(out, rhs))
		}
	}
	if pointerToNonPointer {
		panic("mapper: pointer to non-pointer not allowed")
	}
}

func (g *Generator) validatePointerConversion(lhs, rhs *mapper.Type) {
	if lhs.IsPointer && !rhs.IsPointer {
		panic(fmt.Sprintf("mapper: conversion of value %s to pointer %s not allowed",
			lhs.Signature(),
			rhs.Signature(),
		))
	}
}

func (g *Generator) loadTagFunction(field *mapper.StructField) *mapper.Func {
	tag := field.Tag
	// Use the field pkg path from where the left function
	// reside. It may be on different files.
	fieldPkgPath := field.PkgPath
	if tag.IsImported() {
		fieldPkgPath = tag.PkgPath
	}

	// Load the function.
	pkg := mapper.LoadPackage(fieldPkgPath)
	obj := mapper.LookupType(pkg, tag.Func)
	if obj == nil {
		panic(ErrFuncNotFound(tag))
	}

	fnType, ok := obj.(*types.Func)
	if !ok {
		panic(fmt.Sprintf("mapper: %q is not a func", tag.Func))
	}

	return mapper.ExtractFunc(fnType)
}

func buildFnSignature(lhs, rhs *mapper.Type) string {
	fn := mapper.Func{
		From: mapper.NewFuncArg("", lhs, false),
		To:   mapper.NewFuncArg("", rhs, false),
	}
	return fn.NormalizedSignature()
}

func buildType(t *mapper.Type) func(*Statement) {
	return func(s *Statement) {
		if t.IsSlice {
			s.Add(Index())
		}
		if t.IsPointer {
			s.Add(Op("*"))
		}
	}
}

func genType(T *mapper.Type) *Statement {
	if T.PkgPath != "" {
		return Qual(T.PkgPath, T.Type)
	}
	return Id(T.Type)
}

func ErrConversion(lhs, rhs *mapper.Type) error {
	return fmt.Errorf(`mapper: cannot convert %s to %s`,
		lhs.Signature(),
		rhs.Signature(),
	)
}

func ErrMismatchType(lhs, rhs *mapper.Type) error {
	return fmt.Errorf(`mapper: signature does not match: %s to %s`,
		lhs.Signature(),
		rhs.Signature(),
	)
}

func ErrMissingReturnError(fn mapper.Func) error {
	return fmt.Errorf("mapper: missing return err for %s", fn.PrettySignature())
}

func ErrFuncNotFound(tag *mapper.Tag) error {
	return fmt.Errorf("mapper: func %q from %s not found", tag.Func, tag.Tag)
}
