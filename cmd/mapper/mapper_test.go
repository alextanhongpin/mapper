package main

import (
	"testing"

	"github.com/alextanhongpin/mapper"
	"github.com/alextanhongpin/mapper/loader"
	"github.com/google/go-cmp/cmp"
)

var program = `
package main

type Mapper interface {
	Map(A) B
}

type A struct {
	Name string
}

type B struct {
	Name string
}
`

var generated = `// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.

package main

var _ Mapper = (*Mapper)(nil)

type Mapper struct{}

func NewMapper() *Mapper {
	return &Mapper{}
}

func (m *Mapper) mapMainAToMainB(a0 A) B {
	return B{Name: a0.Name}
}

func (m *Mapper) Map(a0 A) B {
	a1 := m.mapMainAToMainB(a0)
	return a1
}
`

func TestMapper(t *testing.T) {
	pkg := loader.LoadPackageString(program)
	obj := pkg.Scope().Lookup("Mapper")
	gen := NewGenerator(mapper.Option{
		Pkg:     pkg,
		PkgName: pkg.Name(),
		PkgPath: pkg.Path(),
		DryRun:  true,
		Items: []mapper.OptionItem{
			{
				Name: "Mapper",
				Type: obj.Type(),
				Path: "",
			},
		},
	})

	res, err := gen.GenerateString()
	if err != nil {
		t.Fatal(err)
	}
	if diff := cmp.Diff(res, generated); diff != "" {
		t.Fatal(diff)
	}
}

/*
 */
