// Code generated by mapper, DO NOT EDIT.
package main

import (
	bar "github.com/alextanhongpin/mapper/examples/bar"
	foo "github.com/alextanhongpin/mapper/examples/foo"
)

type Converter struct {
	customStructConverter *CustomStructConverter
}

func NewConverter(customStructConverter *CustomStructConverter) *Converter {
	return &Converter{customStructConverter: customStructConverter}
}

func (c *Converter) mapMainDToMainC(d D) (C, error) {
	dID, err := c.customStructConverter.ConvertToInt(d.ID)
	if err != nil {
		return C{}, err
	}

	return C{ID: dID}, nil
}

func (c *Converter) mapMainFooToMainBar(f Foo) (Bar, error) {
	fID, err := f.ID()
	if err != nil {
		return Bar{}, err
	}

	fCustomID, err := ParseUUID(f.CustomID)
	if err != nil {
		return Bar{}, err
	}

	return Bar{
		ExternalID: fCustomID,
		ID:         fID,
		Name:       f.Name(),
		RealAge:    f.FakeAge,
		Task:       f.Task,
	}, nil
}

func (c *Converter) mapMainAToMainB(a A) B {
	return B{Name: a.Name}
}

func (c *Converter) mapFooFooToBarBar(f foo.Foo) (bar.Bar, error) {
	fID, err := f.ID()
	if err != nil {
		return bar.Bar{}, err
	}

	return bar.Bar{
		ID:   fID,
		Name: f.Name,
	}, nil
}

func (c *Converter) mapMainCToMainD(c C) D {
	return D{ID: c.customStructConverter.ConvertToString(c.ID)}
}

func (c *Converter) ConvertSliceWithoutErrors(a []A) []B {
	res := make([]B, len(a))
	for i, s := range a {
		res[i] = c.mapMainAToMainB(s)
	}
	return res
}

func (c *Converter) Convert(a Foo) (Bar, error) {
	return c.mapMainFooToMainBar(a)
}

func (c *Converter) ConvertImport(f foo.Foo) (bar.Bar, error) {
	return c.mapFooFooToBarBar(f)
}

func (c *Converter) ConvertImportStruct(c C) D {
	return c.mapMainCToMainD(c)
}

func (c *Converter) ConvertImportStructWithError(d D) (C, error) {
	return c.mapMainDToMainC(d)
}

func (c *Converter) ConvertNameless(f Foo) (Bar, error) {
	return c.mapMainFooToMainBar(f)
}

func (c *Converter) ConvertSlice(a []Foo) ([]Bar, error) {
	var err error
	res := make([]Bar, len(a))
	for i, s := range a {
		res[i], err = c.mapMainFooToMainBar(s)
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}
