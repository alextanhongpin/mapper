// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.
package main

import examples "github.com/alextanhongpin/mapper/examples"

var _ Mapper = (*MapperImpl)(nil)

type MapperImpl struct{}

func NewMapperImpl() *MapperImpl {
	return &MapperImpl{}
}

func (m *MapperImpl) mapMainAToMainB(g0 A) B {
	return B{
		Bool:  g0.Bool,
		ID:    g0.ID,
		Map:   g0.Map,
		Slice: g0.Slice,
		Str:   g0.Str,
	}
}

func (m *MapperImpl) mapExamplesAToExamplesB(g0 examples.A) examples.B {
	return examples.B{
		Bool:  g0.Bool,
		ID:    g0.ID,
		Map:   g0.Map,
		Slice: g0.Slice,
		Str:   g0.Str,
	}
}

func (m *MapperImpl) AtoB(g0 A) B {
	g1 := m.mapMainAToMainB(g0)
	return g1
}

func (m *MapperImpl) ExternalAtoB(g0 []examples.A) []examples.B {
	g1 := make([]examples.B, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapExamplesAToExamplesB(each)
	}
	return g1
}

func (m *MapperImpl) SliceAtoB(g0 []A) []B {
	g1 := make([]B, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapMainAToMainB(each)
	}
	return g1
}

func (m *MapperImpl) Variadic(g0 ...A) []B {
	g1 := make([]B, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapMainAToMainB(each)
	}
	return g1
}

func (m *MapperImpl) VariadicError(g0 ...A) ([]B, error) {
	g1 := make([]B, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapMainAToMainB(each)
	}
	return g1, nil
}
