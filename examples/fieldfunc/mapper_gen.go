// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.
package main

import (
	"database/sql"
	examples "github.com/alextanhongpin/mapper/examples"
	uuid "github.com/google/uuid"
	"strconv"
)

var _ Mapper = (*MapperImpl)(nil)

type MapperImpl struct{}

func NewMapperImpl() *MapperImpl {
	return &MapperImpl{}
}

func (m *MapperImpl) mapMainAToMainB(g0 A) (B, error) {
	g0ExternalID := examples.IntToString(g0.ExternalID)
	g0ID := IntToString(g0.ID)
	var g0IDs []uuid.UUID
	for _, each := range g0.IDs {
		tmp, err := uuid.Parse(each)
		if err != nil {
			return B{}, err
		}
		g0IDs = append(g0IDs, tmp)
	}
	var g0Nums []int
	for _, each := range g0.Nums {
		tmp, err := strconv.Atoi(each)
		if err != nil {
			return B{}, err
		}
		g0Nums = append(g0Nums, tmp)
	}
	var g0PtrString sql.NullString
	if g0.PtrString != nil {
		g0PtrString = PointerStringToNullString(g0.PtrString)
	}
	g0Remarks := NullStringToPointer(g0.Remarks)
	g0RemarksError, err := NullStringToPointerError(g0.RemarksError)
	if err != nil {
		return B{}, err
	}
	g0UUID, err := uuid.Parse(g0.UUID)
	if err != nil {
		return B{}, err
	}
	return B{
		ExternalID:   g0ExternalID,
		ID:           g0ID,
		IDs:          g0IDs,
		Nums:         g0Nums,
		PtrString:    g0PtrString,
		Remarks:      g0Remarks,
		RemarksError: g0RemarksError,
		UUID:         g0UUID,
	}, nil
}

func (m *MapperImpl) mapExamplesCustomFieldToMainCustomField(g0 examples.CustomField) (CustomField, error) {
	g0Num, err := StringToInt(g0.Num)
	if err != nil {
		return CustomField{}, err
	}
	return CustomField{Num: g0Num}, nil
}

func (m *MapperImpl) mapMainCToMainD(g0 C) D {
	g0ID := IntToString(g0.ID)
	return D{ID: g0ID}
}

func (m *MapperImpl) AtoB(g0 A) (B, error) {
	g1, err := m.mapMainAToMainB(g0)
	if err != nil {
		return B{}, err
	}
	return g1, nil
}

func (m *MapperImpl) ConvertImportedFunc(g0 examples.CustomField) (CustomField, error) {
	g1, err := m.mapExamplesCustomFieldToMainCustomField(g0)
	if err != nil {
		return CustomField{}, err
	}
	return g1, nil
}

func (m *MapperImpl) ConvertImportedFuncPointer(g0 examples.CustomField) (*CustomField, error) {
	g1, err := m.mapExamplesCustomFieldToMainCustomField(g0)
	if err != nil {
		return nil, err
	}
	g2 := &g1
	return g2, nil
}

func (m *MapperImpl) CtoD(g0 C) D {
	g1 := m.mapMainCToMainD(g0)
	return g1
}

func (m *MapperImpl) SliceAtoB(g0 []A) ([]B, error) {
	var g1 []B
	for _, each := range g0 {
		tmp, err := m.mapMainAToMainB(each)
		if err != nil {
			return nil, err
		}
		g1 = append(g1, tmp)
	}
	return g1, nil
}

func (m *MapperImpl) SliceCtoD(g0 []C) []D {
	g1 := make([]D, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapMainCToMainD(each)
	}
	return g1
}

func (m *MapperImpl) VariadicAtoB(g0 ...A) ([]B, error) {
	var g1 []B
	for _, each := range g0 {
		tmp, err := m.mapMainAToMainB(each)
		if err != nil {
			return nil, err
		}
		g1 = append(g1, tmp)
	}
	return g1, nil
}

func (m *MapperImpl) VariadicCtoD(g0 ...C) []D {
	g1 := make([]D, len(g0))
	for i, each := range g0 {
		g1[i] = m.mapMainCToMainD(each)
	}
	return g1
}
