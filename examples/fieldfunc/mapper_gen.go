// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.
package main

import (
	examples "github.com/alextanhongpin/mapper/examples"
	uuid "github.com/google/uuid"
	"strconv"
)

type MapperImpl struct{}

func NewMapperImpl() *MapperImpl {
	return &MapperImpl{}
}

func (m *MapperImpl) mapMainAToMainB(a0 A) (B, error) {
	a0ExternalID := examples.IntToString(a0.ExternalID)
	a0ID := IntToString(a0.ID)
	var a0IDs []uuid.UUID
	for _, each := range a0.IDs {
		tmp, err := uuid.Parse(each)
		if err != nil {
			return B{}, err
		}
		a0IDs = append(a0IDs, tmp)
	}
	var a0Nums []int
	for _, each := range a0.Nums {
		tmp, err := strconv.Atoi(each)
		if err != nil {
			return B{}, err
		}
		a0Nums = append(a0Nums, tmp)
	}
	a0Remarks := NullStringToPointer(a0.Remarks)
	a0RemarksError, err := NullStringToPointerError(a0.RemarksError)
	if err != nil {
		return B{}, err
	}
	a0UUID, err := uuid.Parse(a0.UUID)
	if err != nil {
		return B{}, err
	}
	return B{
		ExternalID:   a0ExternalID,
		ID:           a0ID,
		IDs:          a0IDs,
		Nums:         a0Nums,
		Remarks:      a0Remarks,
		RemarksError: a0RemarksError,
		UUID:         a0UUID,
	}, nil
}

func (m *MapperImpl) mapExamplesCustomFieldToMainCustomField(c0 examples.CustomField) (CustomField, error) {
	c0Num, err := examples.StringToInt(c0.Num)
	if err != nil {
		return CustomField{}, err
	}
	return CustomField{Num: c0Num}, nil
}

func (m *MapperImpl) mapMainCToMainD(c0 C) D {
	c0ID := IntToString(c0.ID)
	return D{ID: c0ID}
}

func (m *MapperImpl) AtoB(a0A A) (B, error) {
	a1A, err := m.mapMainAToMainB(a0A)
	if err != nil {
		return B{}, err
	}
	return a1A, nil
}

func (m *MapperImpl) ConvertImportedFunc(c0CustomField examples.CustomField) (CustomField, error) {
	c1CustomField, err := m.mapExamplesCustomFieldToMainCustomField(c0CustomField)
	if err != nil {
		return CustomField{}, err
	}
	return c1CustomField, nil
}

func (m *MapperImpl) ConvertImportedFuncPointer(c0CustomField examples.CustomField) (*CustomField, error) {
	c1CustomField, err := m.mapExamplesCustomFieldToMainCustomField(c0CustomField)
	if err != nil {
		return nil, err
	}
	return &c1CustomField, nil
}

func (m *MapperImpl) CtoD(c0C C) D {
	c1C := m.mapMainCToMainD(c0C)
	return c1C
}

func (m *MapperImpl) SliceAtoB(a0A []A) ([]B, error) {
	var a1A []B
	for _, each := range a0A {
		tmp, err := m.mapMainAToMainB(each)
		if err != nil {
			return nil, err
		}
		a1A = append(a1A, tmp)
	}
	return a1A, nil
}

func (m *MapperImpl) SliceCtoD(c0C []C) []D {
	c1C := make([]D, len(c0C))
	for i, each := range c0C {
		c1C[i] = m.mapMainCToMainD(each)
	}
	return c1C
}

func (m *MapperImpl) VariadicAtoB(a0A []A) ([]B, error) {
	var a1A []B
	for _, each := range a0A {
		tmp, err := m.mapMainAToMainB(each)
		if err != nil {
			return nil, err
		}
		a1A = append(a1A, tmp)
	}
	return a1A, nil
}

func (m *MapperImpl) VariadicCtoD(c0C []C) []D {
	c1C := make([]D, len(c0C))
	for i, each := range c0C {
		c1C[i] = m.mapMainCToMainD(each)
	}
	return c1C
}
