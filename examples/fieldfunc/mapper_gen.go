// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.
package main

import (
	examples "github.com/alextanhongpin/mapper/examples"
	uuid "github.com/google/uuid"
)

type MapperImpl struct{}

func NewMapperImpl() *MapperImpl {
	return &MapperImpl{}
}

func (m *MapperImpl) mapMainAToMainB(a0 A) (B, error) {
	a0ExternalID := examples.IntToString(a0.ExternalID)
	a0ID := IntToString(a0.ID)
	a0Remarks := NullStringToPointer(a0.Remarks)
	a0RemarksError, err := NullStringToPointerError(a0.RemarksError)
	if err != nil {
		return B{}, err
	}
	a0UUID, err := uuid.Parse(a0.UUID)
	if err != nil {
		return B{}, err
	}
	return B{
		ExternalID:   a0ExternalID,
		ID:           a0ID,
		IDs:          a0IDs,
		Nums:         a0Nums,
		Remarks:      a0Remarks,
		RemarksError: a0RemarksError,
		UUID:         a0UUID,
	}, nil
}

func (m *MapperImpl) mapExamplesCustomFieldToMainCustomField(c0 examples.CustomField) (CustomField, error) {
	c0Num, err := examples.StringToInt(c0.Num)
	if err != nil {
		return CustomField{}, err
	}
	return CustomField{Num: c0Num}, nil
}

func (m *MapperImpl) mapMainCToMainD(c0 C) D {
	c0ID := IntToString(c0.ID)
	return D{ID: c0ID}
}

func (m *MapperImpl) AtoB(a0 A) (B, error) {
	return m.mapMainAToMainB(a0)
}

func (m *MapperImpl) ConvertImportedFunc(c0 examples.CustomField) (CustomField, error) {
	return m.mapExamplesCustomFieldToMainCustomField(c0)
}

func (m *MapperImpl) ConvertImportedFuncPointer(c0 examples.CustomField) (*CustomField, error) {
	res, err := m.mapExamplesCustomFieldToMainCustomField(c0)
	if err != nil {
		return &CustomField{}, err
	}
	return &res, nil
}

func (m *MapperImpl) CtoD(c0 C) D {
	return m.mapMainCToMainD(c0)
}

func (m *MapperImpl) SliceAtoB(a0 []A) ([]B, error) {
	res := make([]B, len(a0))
	for i, each := range a0 {
		var err error
		res[i], err = m.mapMainAToMainB(each)
		if err != nil {
			return B{}, err
		}
	}
	return res, nil
}

func (m *MapperImpl) SliceCtoD(c0 []C) []D {
	res := make([]D, len(c0))
	for i, each := range c0 {
		res[i] = m.mapMainCToMainD(each)
	}
	return res
}

func (m *MapperImpl) VariadicAtoB(a0 []A) ([]B, error) {
	res := make([]B, len(a0))
	for i, each := range a0 {
		var err error
		res[i], err = m.mapMainAToMainB(each)
		if err != nil {
			return B{}, err
		}
	}
	return res, nil
}

func (m *MapperImpl) VariadicCtoD(c0 []C) []D {
	res := make([]D, len(c0))
	for i, each := range c0 {
		res[i] = m.mapMainCToMainD(each)
	}
	return res
}
