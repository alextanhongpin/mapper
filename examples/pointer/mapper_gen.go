// Code generated by github.com/alextanhongpin/mapper, DO NOT EDIT.
package main

import examples "github.com/alextanhongpin/mapper/examples"

var _ Mapper = (*MapperImpl)(nil)

type MapperImpl struct{}

func NewMapperImpl() *MapperImpl {
	return &MapperImpl{}
}

func (m *MapperImpl) mapMainAToMainB(a0 A) B {
	a0NonPtrToPointer := m.mapMainCToMainD(a0.NonPtrToPointer)
	a1NonPtrToPointer := &a0NonPtrToPointer
	var a0Ptr *D
	if a0.Ptr != nil {
		tmp := m.mapMainCToMainD(*a0.Ptr)
		a0Ptr = &tmp
	}
	return B{
		Bool:            a0.Bool,
		ID:              a0.ID,
		Map:             a0.Map,
		NonPtrToPointer: a1NonPtrToPointer,
		Ptr:             a0Ptr,
		Slice:           a0.Slice,
		Str:             a0.Str,
	}
}

func (m *MapperImpl) mapMainCToMainD(c0 C) D {
	return D{
		Age:  &c0.Age,
		Name: c0.Name,
	}
}

func (m *MapperImpl) mapExamplesAToExamplesB(a0 examples.A) examples.B {
	return examples.B{
		Bool:  a0.Bool,
		ID:    a0.ID,
		Map:   a0.Map,
		Slice: a0.Slice,
		Str:   a0.Str,
	}
}

func (m *MapperImpl) AtoB(a0A A) *B {
	a1A := m.mapMainAToMainB(a0A)
	a2A := &a1A
	return a2A
}

func (m *MapperImpl) CPointerToDPointer(c0C *C) *D {
	var c1C *D
	if c0C != nil {
		tmp := m.mapMainCToMainD(*c0C)
		c1C = &tmp
	}
	return c1C
}

func (m *MapperImpl) CtoD(c0C C) D {
	c1C := m.mapMainCToMainD(c0C)
	return c1C
}

func (m *MapperImpl) CtoDPointer(c0C C) *D {
	c1C := m.mapMainCToMainD(c0C)
	c2C := &c1C
	return c2C
}

func (m *MapperImpl) ExternalAtoB(a0A examples.A) *examples.B {
	a1A := m.mapExamplesAToExamplesB(a0A)
	a2A := &a1A
	return a2A
}
